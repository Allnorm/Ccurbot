from telebot import types

import interlayer
import telebot
import utils as ut


def value_checker(amount):
    thousand = 1
    if amount[-1].lower() == "k" or amount[-1].lower() == "–∫":
        thousand = 1000
        amount = amount[:-1]
    if amount[-1].lower() == "m" or amount[-1].lower() == "–º":
        thousand = 1000000
        amount = amount[:-1]
    try:
        return float(amount.replace(',', '.')) * thousand
    except (ValueError, TypeError, AttributeError):
        return None


rate_interlayer = interlayer.Interlayer()
utils = ut.Utils()
bot = telebot.TeleBot(utils.token)


def inline_error(inline_id, title, description):
    bot.answer_inline_query(inline_id, [telebot.types.InlineQueryResultArticle(
        id='ERROR', title=title,
        description=description,
        input_message_content=telebot.types.InputTextMessageContent(message_text="–ò –∑–∞—á–µ–º —Ç—ã –Ω–∞–∂–∞–ª –Ω–∞ –º–µ–Ω—è?"))])


def bot_name_checker(message):  # Crutch to prevent the bot from responding to other bots commands

    cmd_text = message.text.split()[0]

    if ("@" in cmd_text and "@" + bot.get_me().username in cmd_text) or not ("@" in cmd_text):
        return True
    else:
        return False


def inline_currencies_list():
    wallet_list = "\n".join([f'{key} - {value}' for key, value in rate_interlayer.parsed_currencies.items()])
    return (
            [types.InlineQueryResultArticle(
                id="ERROR",
                title="–£–∫–∞–∑–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!",
                description="–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç",
                input_message_content=types.InputTextMessageContent(
                    message_text=f"–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç:\n{wallet_list}"))]
    )


def inline_result_list(current_currency_name, current_currency_amount, second_currency_name):

    inline_list = []
    all_values_text = f'{current_currency_amount} {current_currency_name} - —ç—Ç–æ:\n'
    formatted_amount = f"{current_currency_amount:,}".replace(",", " ")
    for key, value in rate_interlayer.currency_counter(current_currency_name,
                                                       current_currency_amount, second_currency_name).items():
        value_text = f"{value:,}".replace(",", " ")
        message_text = (f"{formatted_amount} {current_currency_name} "
                        f"- —ç—Ç–æ <code>{value_text}</code> {key.split()[0]}") \
            if value != 0 else "–ò –∑–∞—á–µ–º —Ç—ã –Ω–∞–∂–∞–ª –Ω–∞ –º–µ–Ω—è?"
        if value != 0:
            emoji = '-'
            transformed_value = value / current_currency_amount
            if 0 < transformed_value < 0.7:
                emoji = 'ü™ô'
            elif 0.7 <= transformed_value < 5:
                emoji = '‚öñÔ∏è'
            elif 5 <= transformed_value < 100:
                emoji = 'üóû'
            elif 100 <= transformed_value < 500:
                emoji = 'üßª'
            elif 500 <= transformed_value:
                emoji = '‚ö∞Ô∏è'
            all_values_text += f'{emoji} <code>{value_text}</code> {key}\n'
        else:
            value_text = "–£–∫–∞–∑–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"
        inline_list.append(types.InlineQueryResultArticle(
            id=f"{current_currency_amount}_{current_currency_name}_{value_text}_{key.split()[0]}",
            title=key,
            description=value_text,
            input_message_content=types.InputTextMessageContent(message_text=message_text, parse_mode='html')))

    if not second_currency_name:
        return [types.InlineQueryResultArticle(
            id=f'{current_currency_name}_{current_currency_amount}_NOT_SECOND',
            title="–í—Ç–æ—Ä–∞—è –≤–∞–ª—é—Ç–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞",
            description=f"–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –≤–∞–ª—é—Ç—ã",
            input_message_content=types.InputTextMessageContent(message_text=all_values_text, parse_mode='html'))
        ]
    elif len(inline_list) > 50:
        return [types.InlineQueryResultArticle(
            id=f'{current_currency_name}_{current_currency_amount}_TOO_MUCH',
            title="–í —Å–ø–∏—Å–∫–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–∞–ª—é—Ç–Ω—ã—Ö –∫—É—Ä—Å–æ–≤",
            description=f'–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –≤–∞–ª—é—Ç—ã',
            input_message_content=types.InputTextMessageContent(message_text=all_values_text, parse_mode='html'))]
    elif len(inline_list) == 0:
        return inline_currencies_list()
    elif len(inline_list) == 1:
        return inline_list
    else:
        return [types.InlineQueryResultArticle(
            id=f'{current_currency_name}_{current_currency_amount}_FILTERED',
            title="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö –∫—É—Ä—Å–æ–≤",
            description=f"–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä—É",
            input_message_content=types.InputTextMessageContent(message_text=all_values_text, parse_mode='html'))
        ] + inline_list


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    if bot_name_checker(message):
        bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—ã.\n"
                              "–ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –≤ —Ä–µ–∂–∏–º–µ –∏–Ω–ª–∞–π–Ω: `@ccur2bot 1200 RUB`, "
                              "`@ccur2bot 12k usd byn` –∏–ª–∏ `@ccur2bot 0,8m kzt EU`\n"
                              "/values - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç.\n"
                              "–°–æ–∑–¥–∞–Ω–æ Allnorm'–æ–º. –ö–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ: "
                              "https://github.com/Allnorm/Ccurbot", parse_mode="markdown")


@bot.inline_handler(lambda query: len(query.query) >= 0)
def query_text(inline_query):
    if utils.extract_arg(inline_query.query, 0) is None:
        inline_error(inline_query.id, "–ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø—É—Å—Ç–æ–µ",
                     "–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ 2 (3) –∞—Ä–≥—É–º–µ–Ω—Ç–∞ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, "
                     "–∫–æ–¥ –∏—Å—Ö–æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ - –∫–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π –≤–∞–ª—é—Ç—ã)")
        return

    current_currency_amount = value_checker(utils.extract_arg(inline_query.query, 0))
    if current_currency_amount is None:
        inline_error(inline_query.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç", "–ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤ —á–∏—Å–ª–æ")
        return

    if utils.extract_arg(inline_query.query, 1) is None:
        inline_error(inline_query.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤",
                     "–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ 2 (3) –∞—Ä–≥—É–º–µ–Ω—Ç–∞ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∫–æ–¥ –∏—Å—Ö–æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã "
                     "(–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ - –∫–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π –≤–∞–ª—é—Ç—ã)")
        return

    if utils.extract_arg(inline_query.query, 3) is not None:
        inline_error(inline_query.id, "–ê—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ",
                     "–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ 2 (3) –∞—Ä–≥—É–º–µ–Ω—Ç–∞ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, "
                     "–∫–æ–¥ –∏—Å—Ö–æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ - –∫–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π –≤–∞–ª—é—Ç—ã)")
        return

    current_currency_name = utils.extract_arg(inline_query.query, 1).upper()
    if not rate_interlayer.is_currency_exist(current_currency_name):
        bot.answer_inline_query(inline_query.id, inline_currencies_list())
        return

    if current_currency_amount >= 1:
        if current_currency_amount % int(current_currency_amount) == 0:
            current_currency_amount = int(current_currency_amount)

    if current_currency_amount <= 0:
        inline_error(inline_query.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç",
                     "–ó–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞–ª—é—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 0")
        return

    try:
        second_currency_name = utils.extract_arg(inline_query.query, 2).upper()
    except AttributeError:
        second_currency_name = ""

    answer_list = inline_result_list(current_currency_name, current_currency_amount, second_currency_name)
    bot.answer_inline_query(inline_query.id, answer_list)


@bot.message_handler(commands=['values'])
def currencies_list(message):

    if bot_name_checker(message):
        text = "–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –Ω–∏–∂–µ:\n"
        for key, value in rate_interlayer.parsed_currencies.items():
            text += f"`{key} - {value}`\n"
        bot.reply_to(message, text, parse_mode='markdown')


bot.infinity_polling()
